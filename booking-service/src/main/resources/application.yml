server:
  port: 8084

spring:
  application:
    name: bookingservice
  config:
    import: "optional:configserver:http://localhost:8071/"

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.trusted.packages: "*"
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: bookingservice
      properties:
        spring.json.trusted.packages: "*"

  datasource:
    url: jdbc:postgresql://localhost:5432/userservicedb
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: postgres
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true

jwt:
  secret-key: ${JWT_SECRET_KEY:ZGlnNF4lXiYqKCo0MjRnZXdnZXdma2Vmfmg4gr25fbg15}
  signature-algorithm: HS256

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    liveness-state:
      enabled: true
    readiness-state:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true

event:
  topic:
    listing:
      availability:
        request: "listing-availability-request"
        response: "listing-availability-response"
        block: "listing-availability-block"
        unblock: "listing-availability-unblock"
    payment:
      create-request: "payment-create-request"
      success: "payment-success"
      failure: "payment-failure"
    notification:
      send-request: "notification-send-request"

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: alpha
    tags-sorter: alpha
    display-request-duration: true
  api-docs:
    path: /v3/api-docs