server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: ${SPRING_APPLICATION_NAME:userservice}
  config:
    import: "optional:configserver:${CONFIG_SERVER_URL:http://localhost:8071/}"

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: ${KAFKA_PRODUCER_KEY_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}
      value-serializer: ${KAFKA_PRODUCER_VALUE_SERIALIZER:org.springframework.kafka.support.serializer.JsonSerializer}
      acks: ${KAFKA_PRODUCER_ACKS:1}
      retries: ${KAFKA_PRODUCER_RETRIES:3}
      retry:
        backoff: ${KAFKA_PRODUCER_RETRY_BACKOFF:1000}
      properties:
        spring.json.trusted.packages: ${KAFKA_PRODUCER_TRUSTED_PACKAGES:*}

  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/userservicedb}
    driver-class-name: ${DB_DRIVER_CLASS_NAME:org.postgresql.Driver}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: ${JPA_HIBERNATE_DDL_AUTO:none}
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    out-of-order: false

springdoc:
  swagger-ui:
    operations-sorter: alpha
    tags-sorter: alpha
    display-request-duration: true
    enabled: true
  api-docs:
    path: /v3/api-docs

management:
  endpoints:
    web:
      exposure:
        include: "*"
  prometheus:
    metrics:
      export:
        enabled: true
  health:
    liveness-state:
      enabled: true
    readiness-state:
      enabled: true
    db:
      enabled: true
    kafka:
      enabled: true
  endpoint:
    prometheus:
      enabled: true
    health:
      probes:
        enabled: true
      shutdown:
        enabled: true
      show-details: always

jwt:
  secret-key: ${JWT_SECRET_KEY:ZGlnNF4lXiYqKCo0MjRnZXdnZXdma2Vmfmg4gr25fbg15}
  access-expiration-time: ${JWT_ACCESS_EXPIRATION_TIME:3600000}
  refresh-expiration-time: ${JWT_REFRESH_EXPIRATION_TIME:604800000}
  signature-algorithm: ${JWT_SIGNATURE_ALGORITHM:HS256}

token:
  password-reset:
    expiry-minutes: ${TOKEN_PASSWORD_RESET_EXPIRY_MINUTES:10}
  verification:
    expiry-hours: ${TOKEN_VERIFICATION_EXPIRY_HOURS:24}

email:
  verification:
    subject: ${EMAIL_VERIFICATION_SUBJECT:Account Verification}
    message: "Please click on the link to verify your account: %s"
  password-reset:
    subject: ${EMAIL_PASSWORD_RESET_SUBJECT:Password Reset Request}
    message: "Your password reset code is: %s"

verification:
  base-url: ${VERIFICATION_BASE_URL:http://localhost:8080/api/v1/auth}

event:
  topic:
    verification: ${EVENT_TOPIC_VERIFICATION:account-verification}
    password-reset: ${EVENT_TOPIC_PASSWORD_RESET:password-reset}

logging:
  level:
    com.rentspace.userservice: DEBUG
    org.springframework.security: INFO
    org.springdoc: INFO
    org.springframework.web: INFO
    org.hibernate.sql: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.flywaydb: DEBUG