services:
    userservicedb:
        container_name: userservicedb
        image: postgres:15
        healthcheck:
            test: [ "CMD", "pg_isready", "-U", "postgres" ]
            timeout: 10s
            retries: 10
            interval: 10s
            start_period: 10s
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: userservicedb
        ports:
            - "5432:5432"
        networks:
            - rentspace
    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4
        restart: always
        ports:
            - "5050:80"
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@admin.com
            PGADMIN_DEFAULT_PASSWORD: admin
            PGADMIN_CONFIG_SERVER_MODE: "True"
            PGADMIN_LOG_LEVEL: "DEBUG"
        depends_on:
            userservicedb:
                condition: service_healthy
        volumes:
            - ./postgres_db_data/servers.json:/pgadmin4/servers.json
            - ./postgres_db_data/pgpass:/pgpass
        user: root
        entrypoint: /bin/sh -c "chmod 600 /pgpass && /entrypoint.sh"
        networks:
            - rentspace
#        extends:
#            file: common-config.yml
#            service: base-service

    minio:
        container_name: minio
        image: minio/minio:latest
        ports:
            - "9000:9000"
            - "9001:9001"
        volumes:
            - minio_data:/data
        command: server /data --console-address ":9001"
        environment:
            MINIO_ROOT_USER: minioadmin
            MINIO_ROOT_PASSWORD: minioadmin
        networks:
            - rentspace

    kafka-1:
        container_name: kafka-1
        image: bitnami/kafka:latest
        environment:
            - KAFKA_CFG_NODE_ID=1
            - KAFKA_CFG_PROCESS_ROLES=broker,controller
            - KAFKA_KRAFT_CLUSTER_ID=nky7lYvIRimbvRyKeHU8-g

            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9094
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,CONTROLLER://kafka-1:9094
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9094
        ports:
            - "9092:9092"
        volumes:
            - kafka-data:/bitnami/kafka
        networks:
            - rentspace

    elasticsearch:
        container_name: elasticsearch
        image: elasticsearch:8.14.2
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        ports:
            - "9200:9200"
        volumes:
            - esdata:/usr/share/elasticsearch/data
        mem_limit: 1g
        mem_reservation: 512m
        networks:
            - rentspace

    promethous:
        container_name: prometheus
        image: prom/prometheus:v2.45.0
        ports:
            - "9090:9090"
        volumes:
            - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        networks:
            - rentspace

    configservice:
        container_name: configservice
        image: d0niiel/configservice:v1
        ports:
            - "8071:8071"
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:8071/actuator/health/readiness || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 10
        networks:
            - rentspace

    discoveryservice:
        container_name: discoveryservice
        image: d0niiel/discoveryservice:v1
        ports:
            - "8761:8761"
        restart: always
        environment:
            SPRING_PROFILES_ACTIVE: default
            SPRING_CONFIG_IMPORT: "configserver:http://configservice:8071/"
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health/readiness || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 10
        depends_on:
            configservice:
                condition: service_healthy
        networks:
            - rentspace

#    userservice:
#        image: d0niiel/userservice:v1
#        container_name: userservice
#        restart: always
##        extends:
##            file: common-config.yml
##            service: app-service
#        ports:
#            - "8080:8080"
#        depends_on:
#            discoveryservice:
#                condition: service_healthy
#            userservicedb:
#                condition: service_healthy
#            kafka-1:
#                condition: service_started
#        environment:
#            SPRING_APPLICATION_NAME: userservice
#            SPRING_DATASOURCE_URL: jdbc:postgresql://userservicedb:5432/userservicedb
#            SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka-1:9092"
#            SPRING_DATASOURCE_USERNAME: postgres
#            SPRING_DATASOURCE_PASSWORD: postgres
#            SPRING_PROFILES_ACTIVE: default
#            SPRING_CONFIG_IMPORT: "configserver:http://configservice:8071/"
#            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discoveryservice:8761/eureka/"
#        networks:
#            - rentspace
#
#    listingservice:
#        image: d0niiel/listingservice:v1
#        container_name: listingservice
#        restart: always
#        ports:
#            - "8082:8082"
#        depends_on:
#            discoveryservice:
#                condition: service_healthy
#            userservicedb:
#                condition: service_healthy
#        environment:
#            SPRING_DATASOURCE_URL: jdbc:postgresql://userservicedb:5432/userservicedb
#            SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka-1:9092"
#            SPRING_DATASOURCE_USERNAME: postgres
#            SPRING_DATASOURCE_PASSWORD: postgres
#            SPRING_PROFILES_ACTIVE: default
#            SPRING_CONFIG_IMPORT: "configserver:http://configservice:8071/"
#            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discoveryservice:8761/eureka/"
#            MINIO_BUCKET: images
#            MINIO_URL: http://minio:9000/
#            MINIO_ACCESSKEY: minioadmin
#            MINIO_SECRETKEY: minioadmin
#        networks:
#            - rentspace

#    notificationservice:
#        image: d0niiel/notificationservice:v1
#        container_name: notificationservice
#        restart: always
#        ports:
#            - "8083:8083"
#        depends_on:
#            discoveryservice:
#                condition: service_healthy
#            userservicedb:
#                condition: service_healthy
#            kafka-1:
#                condition: service_started
#        environment:
#            SPRING_APPLICATION_NAME: notificationservice
#            SPRING_DATASOURCE_URL: jdbc:postgresql://userservicedb:5432/userservicedb
#            SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka-1:9092"
#            SPRING_DATASOURCE_USERNAME: postgres
#            SPRING_DATASOURCE_PASSWORD: postgres
#            SPRING_PROFILES_ACTIVE: default
#            SPRING_CONFIG_IMPORT: "configserver:http://configservice:8071/"
#            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discoveryservice:8761/eureka/"
#        networks:
#            - rentspace

#    bookingservice:
#        image: d0niiel/bookingservice:v1
#        container_name: bookingservice
#        restart: always
#        ports:
#            - "8084:8084"
#        depends_on:
#            discoveryservice:
#                condition: service_healthy
#            userservicedb:
#                condition: service_healthy
#            kafka-1:
#                condition: service_started
#        environment:
#            SPRING_APPLICATION_NAME: bookingservice
#            SPRING_DATASOURCE_URL: jdbc:postgresql://userservicedb:5432/userservicedb
#            SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka-1:9092"
#            SPRING_DATASOURCE_USERNAME: postgres
#            SPRING_DATASOURCE_PASSWORD: postgres
#            SPRING_PROFILES_ACTIVE: default
#            SPRING_CONFIG_IMPORT: "configserver:http://configservice:8071/"
#            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discoveryservice:8761/eureka/"
#        networks:
#            - rentspace
#
#    searchservice:
#        image: d0niiel/searchservice:v1
#        container_name: searchservice
#        restart: always
#        ports:
#            - "8085:8085"
#        depends_on:
#            - elasticsearch
#            - kafka-1
#            - configservice
#            - discoveryservice
#        environment:
#            SPRING_APPLICATION_NAME: searchservice
#            SPRING_PROFILES_ACTIVE: default
#            SPRING_DATASOURCE_URL: jdbc:postgresql://userservicedb:5432/userservicedb
#            SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka-1:9092"
#            SPRING_DATASOURCE_USERNAME: postgres
#            SPRING_DATASOURCE_PASSWORD: postgres
#            SPRING_ELASTICSEARCH_URIS: "http://elasticsearch:9200"
#            SPRING_CONFIG_IMPORT: "configserver:http://configservice:8071/"
#            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discoveryservice:8761/eureka/"
#        networks:
#            - rentspace

#    reviewservice:
#        image: d0niiel/reviewservice:v1
#        container_name: reviewservice
#        restart: always
#        ports:
#            - "8081:8081"
#        depends_on:
#            discoveryservice:
#                condition: service_healthy
#            userservicedb:
#                condition: service_healthy
#            kafka-1:
#                condition: service_started
#        environment:
#            SPRING_APPLICATION_NAME: reviewservice
#            SPRING_PROFILES_ACTIVE: default
#            SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka-1:9092"
#            SPRING_DATASOURCE_URL: jdbc:postgresql://userservicedb:5432/userservicedb
#            SPRING_DATASOURCE_USERNAME: postgres
#            SPRING_DATASOURCE_PASSWORD: postgres
#            SPRING_CONFIG_IMPORT: "configserver:http://configservice:8071/"
#            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discoveryservice:8761/eureka/"
#        networks:
#            - rentspace

    paymentservice:
        image: d0niiel/paymentservice:v1
        container_name: paymentservice
        restart: always
        ports:
            - "8086:8086"
        depends_on:
            discoveryservice:
                condition: service_healthy
            kafka-1:
                condition: service_started
        environment:
            SPRING_APPLICATION_NAME: paymentservice
            SPRING_PROFILES_ACTIVE: default
            SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka-1:9092"
            SPRING_DATASOURCE_URL: jdbc:postgresql://userservicedb:5432/userservicedb
            SPRING_DATASOURCE_USERNAME: postgres
            SPRING_DATASOURCE_PASSWORD: postgres
            SPRING_CONFIG_IMPORT: "configserver:http://configservice:8071/"
            EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discoveryservice:8761/eureka/"
        networks:
            - rentspace
volumes:
    minio_data:
    kafka-data:
    esdata:

networks:
    rentspace:
        name: rentspace
        driver: bridge
